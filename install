#!/bin/zsh -f
if [[ $1 == -*x* ]] set -x;
zmodload zsh/system
path+=( /bin )
DIR=$ZSH_SCRIPT:a:h
NAME=$ZSH_SCRIPT:t
REPLY=''
TRAPEXIT() {
  local out=$?
  printf '\nYou can run this script again by running: %s\n' "$DIR/$NAME"
  exit $out
}
trap 'exit $?' INT ERR QUIT TERM

read -r '?Would you like to enter setup? (yes/no): '
if [[ $REPLY != yes ]] return;

REPLY=$DIR
vared -p 'Install path: ' REPLY;
while [[ -e $REPLY:a && $REPLY:a != $DIR ]] {
  syserror -p "$NAME: $REPLY:a: " EEXIST;
  vared -p 'Install path: ' REPLY;
}
if [[ $REPLY:a != $DIR ]] /bin/mv -- "$DIR" "$REPLY:a";
DIR=$REPLY:a;

IN="$DIR/.zshenv" OUT="$HOME/.zshenv"
printf 'Linking %s to %s\n' "$OUT" "$IN"
if [[ $OUT:P == $IN ]] {
  printf '%s already linked to %s\n' "$OUT" "$IN"
} elif [[ -e $OUT ]] {
  syserror -p "$NAME: $OUT: " EEXIST
  return 1
} else {
  /bin/ln -s "$IN" "$OUT"
}

echo
echo 'Reading configuration variables'

readconf() {
  if [[ ! -v 2 ]] 2=${(P)1};
  if [[ -v commands[zsh] ]] {
    - zsh -lic 'builtin printf "%s" "${'$1'-'${(qq)2}'}"' | read -rd '' "$1" && true;
  }
  if [[ -z ${(P)1} ]] typeset $1=$2;
}

let SAVEHIST=10000000 HISTSIZE=100000
readconf HISTFILE
readconf SAVEHIST
readconf HISTSIZE
HISTFILE=$HISTFILE:a

echo 'Entering configuration'
echo

OUT=$DIR/history/.zsh_history
if [[ -e $HISTFILE && $HISTFILE != $OUT ]] {
  read -r '?Would you like to import history from '$HISTFILE'? (yes/no): '
  if [[ $REPLY == yes ]] {
    < "$HISTFILE" >> $OUT
  }
}

HISTFILE=$OUT
vared -p 'History file location (HISTFILE): ' OUT
while [[ -e $OUT:a && $OUT:a != $HISTFILE ]] {
  syserror -p "$NAME: $OUT:a: " EEXIST;
  vared -p 'History file location (HISTFILE): ' OUT;
}
if [[ $OUT:a != $HISTFILE ]] /bin/mv -- "$HISTFILE" "$OUT:a";
HISTFILE=$OUT

vared -p 'Maximum entries in history file (SAVEHIST): ' SAVEHIST
vared -p 'Maximum history entries in memory (HISTSIZE): ' HISTSIZE

if { whence brew >/dev/null; } {
  brew shellenv zsh | source /dev/stdin
} else {
  valid_prefixes=( /usr/local /home/linuxbrew/.linuxbrew /opt/homebrew )
  for valid_prefix ( $valid_prefixes ) {
    if [[ -e $valid_prefix ]] {
      HOMEBREW_PREFERRED=$valid_prefix
    }
  }
  export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-$HOMEBREW_PREFERRED}"
  export HOMEBREW_CELLAR="${HOMEBREW_CELLAR:-$HOMEBREW_PREFIX/Cellar}"
  export HOMEBREW_REPOSITORY="${HOMEBREW_REPOSITORY:-$HOMEBREW_PREFIX}"
}
OLD_PREFIX=$HOMEBREW_PREFIX
vared -p 'Homebrew prefix (HOMEBREW_PREFIX): ' HOMEBREW_PREFIX
if [[ $HOMEBREW_PREFIX != $OLD_PREFIX ]] {
  if [[ $HOMEBREW_CELLAR == $OLD_PREFIX(/*|) ]] {
    HOMEBREW_CELLAR=${HOMEBREW_CELLAR/$OLD_PREFIX/$HOMEBREW_PREFIX}
  }
  if [[ $HOMEBREW_REPOSITORY == $OLD_PREFIX(/*|) ]] {
    HOMEBREW_REPOSITORY=${HOMEBREW_REPOSITORY/$OLD_PREFIX/$HOMEBREW_PREFIX}
  }
}
vared -p 'Homebrew cellar (HOMEBREW_CELLAR): ' HOMEBREW_CELLAR
vared -p 'Homebrew repository (HOMEBREW_REPOSITORY): ' HOMEBREW_REPOSITORY

exec 3<&1 # create file descriptor to be able to redirect something to both stdout AND a file
writeconf() {
  printf -- "%s%s=%s\n" "${2:+$2 }" "$1" "${(Pqq)1}" >> $OUT >&3
}

echo
OUT="$DIR/config/zshenv"
printf 'Writing config (zshenv) to %s\n' "$OUT"
printf '' > $OUT
writeconf HOMEBREW_PREFIX export
writeconf HOMEBREW_CELLAR export
writeconf HOMEBREW_REPOSITORY export

echo
OUT="$DIR/config/zshrc"
printf 'Writing config (zshrc) to %s\n' "$OUT"
printf '' > $OUT
writeconf HISTFILE
writeconf SAVEHIST
writeconf HISTSIZE

echo
typeset -A links=(
  [zcp]=$HOMEBREW_PREFIX/share/zsh/functions/zmv
  [zln]=$HOMEBREW_PREFIX/share/zsh/functions/zmv
)
for OUT IN ( ${(@kv)links} ) {
  OUT=$DIR/functions/ln/$OUT
  printf 'Linking %s to %s\n' "$OUT" "$IN"
  if [[ $OUT:P == $IN:P ]] {
    printf '%s already linked to %s\n' "$OUT" "$IN"
  } else {
    if [[ -e $OUT ]] {
      printf 'removing existing file at %s\n' "$OUT"
      /bin/rm $OUT
    }
    /bin/ln -s $IN $OUT
  }
}

echo
/usr/bin/crontab -l | read -rd '' CRONTAB && true

let MODIFIED=0 && true
for IN ( $DIR/crontab/* ) {
  read -rd '' DATA < $IN && true
  if [[ $CRONTAB == (*$'\n'|)$DATA($'\n'*|) ]] {
    printf '%s already in crontab\n' "$IN:t"
    continue
  }
  read -r '?Install '$IN:t' to crontab? (yes/no): '
  if [[ $REPLY == yes ]] {
    MODIFIED=1
    CRONTAB+=$'\n'$DATA
  }
}
if (( MODIFIED )) {
  /usr/bin/crontab <<< $CRONTAB
}

printf '\n%s' 'Install complete!'
